<?php

/**
 * @file
 * Contains product_rest_api.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\product_rest_api\Controller\RestConsumeController;
use Drupal\award\Entity\AwardEntity;
use Drupal\award\Entity\AwardEntityInterface;
use Symfony\Component\HttpKernel\Exception\NotAcceptableHttpException;
use Drupal\award\AwardEntityAccessControlHandler;
use Drupal\product_rest_api\Servic\RestConsumeService;
/**
 * Implements hook_help().
 */
function product_rest_api_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the product_rest_api module.
    case 'help.page.product_rest_api':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Rest API for Product Entity') . '</p>';
      return $output;

    default:
  }
}

function product_rest_api_cron() {

   //hold the time that cron run last time
  //$expires = \Drupal::state()->get('product_rest_api.cron_last_run',REQUEST_TIME);

  //load session varables
   $tempstore = \Drupal::service('user.private_tempstore')->get('product_rest_api');
   try {
      //here we load our custom service
      $rest = \Drupal::service('product_rest_api.rest_consume');
      //we chose the puplic or internal endpoind
      $response = $rest->consume('awardees');
      $status =  $response->getStatusCode();
      $reason =  $response->getReasonPhrase();
      $con_type = $response->getHeader('Content-Type');
      if($con_type!='application/json' && $con_type!='application/hal+json') {
         throw new NotAcceptableHttpException("Not Acceptable",NULL, 406);
       }
      $modified = $response->getHeader('Last-Modified');
      //read session variable $last_modified
      $last_modified = $tempstore->get('last_modified');
      //Will be later implemented  dynamically in a new function
      //for different endities!
      if($status==200 && $reason=="OK" && ($modified > $last_modified)) {
         $current_user = \Drupal::currentUser()->id();
         // // Refresh entity by deleting all entries and*
         AwardEntity::deleteAll($current_user);
        // inserting the new entities
         $data = json_decode($response->getBody()->getContents(), true);
         AwardEntity::insertAll($data);
         //set new value in session variable
         $tempstore->set('last_modified', $modified);
      }
    }catch(NotAcceptableHttpException $ex) {
     \Drupal::logger('product_rest_api')->warning($ex->getMessage());
    }catch(RequestException $ex) {
     \Drupal::logger('product_rest_api')->error($ex->getMessage());
    }catch(InvalidArgumentException $ex) {
     \Drupal::logger('product_rest_api')->error($ex->getMessage());
    }catch(EntityStorageException $ex) {
     \Drupal::logger('product_rest_api')->error($ex->getMessage());
   }
}
/**
 * Implements hook_theme().
 */
function product_rest_api_theme() {
  return [
    'product_rest_api'=> [
      'variables' => [
        'products' => NULL
      ]
    ],
  ];
}
