<?php

/**
 * @file
 * Contains product_rest_api.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\product_rest_api\Controller\RestConsumeController;
use Drupal\award\Entity\AwardEntity;
/**
 * Implements hook_help().
 */
function product_rest_api_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the product_rest_api module.
    case 'help.page.product_rest_api':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Rest API for Product Entity') . '</p>';
      return $output;

    default:
  }
}

function product_rest_api_cron() {

   //hold the time that cron run last time
  //$expires = \Drupal::state()->get('product_rest_api.cron_last_run',REQUEST_TIME);
   //load session varables
   $tempstore = \Drupal::service('user.private_tempstore')->get('product_rest_api');
   try {
     $client = \Drupal::httpClient();
     $response = $client->get('http://chroniclingamerica.loc.gov/awardees.json', ['headers' => [
        'Accept'     => 'application/json',
        'http_errors' => false,
        ]
    ]);
     //  $request = $client->createRequest('GET', 'http://chroniclingamerica.loc.gov/newspapers.json');
      $status =  $response->getStatusCode();
      $reason =  $response->getReasonPhrase();
      // $header1 = $response->getHeader('Content-Type');
      $modified = $response->getHeader('Last-Modified');
      //read session variable $last_modified
      $last_modified = $tempstore->get('last_modified');
      //set new value in session variable
      $tempstore->set('last_modified', $modified);
      if($status==200 && $reason=="OK" && ($modified > $last_modified)) {
        $current_user = \Drupal::currentUser()->id();
        //Refresh entity by deleting all entries and*
        $ent_ret = \Drupal::entityQuery('award_entity','AND')
                  ->condition('user_id', $current_user)
                  ->execute();
        entity_delete_multiple('award_entity', $ent_ret);
        //inserting the new entities
        $data = json_decode($response->getBody()->getContents(), true);
        $awards = $data["awardees"];
        foreach($awards as $award) {
          $entity = AwardEntity::create();
            $name = $award["name"];
            $url = $award["url"];
            $entity->setName($award["name"]);
            $entity->setUrl($award["url"]);
          $entity->save();
        }
        // $restController = new RestConsumeController();
        // $restController->api($properties);
        // $response->getBody()->seek(count($properties));
      }
      $tempstore->set('last_modifie', $modified);
   }catch(RequestException $ex) {
     \Drupal::logger('product_rest_api')->notice($ex);
   }catch(InvalidArgumentException $ex) {
     \Drupal::logger('product_rest_api')->notice($ex);
   }
   catch(EntityStorageException $ex) {
     \Drupal::logger('product_rest_api')->notice($ex);
   }
//
//   // Long-running operation example, leveraging a queue:
//   // Queue news feeds for updates once their refresh interval has elapsed.
//   $queue = \Drupal::queue('products_consumer');
//   $ids = \Drupal::entityManager()->getStorage('products')->getFeedIdsToRefresh();
//   foreach (Feed::loadMultiple($ids) as $feed) {
//     if ($queue->createItem($feed)) {
//       // Add timestamp to avoid queueing item more than once.
//       $feed->setQueuedTime(REQUEST_TIME);
//       $feed->save();
//     }
//   }
//   $ids = \Drupal::entityQuery('products')
//     ->condition('queued', REQUEST_TIME - (3600 * 6), '<')
//     ->execute();
//   if ($ids) {
//     $feeds = Feed::loadMultiple($ids);
//     foreach ($feeds as $feed) {
//       $feed->setQueuedTime(0);
//       $feed->save();
//     }
//   }
}
/**
 * Implements hook_theme().
 */
function product_rest_api_theme() {
  return [
    'product_rest_api' => [
      'render element' => 'children',
    ],
  ];
}
